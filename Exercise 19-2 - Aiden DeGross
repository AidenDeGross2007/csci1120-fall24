//main.cpp
#include <iostream>

#include "binaryTree.h"

using namespace std;

int main()

{

binaryTreeType<int> ob;


ob.root = new( struct binaryTreeNode<int> );

ob.root->info = 10;


ob.root->llink = new( struct binaryTreeNode<int> );

ob.root->llink->info = 5;

ob.root->llink->rlink = NULL;


ob.root->rlink = new( struct binaryTreeNode<int> );

ob.root->rlink->info = 15;

ob.root->rlink->rlink = NULL;

ob.root->llink->llink = new( struct binaryTreeNode<int> );

ob.root->llink->llink->info = 3;

ob.root->llink->llink->llink = NULL;

ob.root->llink->llink->rlink = NULL;


ob.root->rlink->llink = new( struct binaryTreeNode<int> );

ob.root->rlink->llink->info = 12;

ob.root->rlink->llink->llink = NULL;

ob.root->rlink->llink->rlink = NULL;


ob.inorderTraversal();


cout<<"\nNo of leaves : "<<ob.treeLeavesCount();


return 0;

}
//binaryTree.h
//Header File Binary Search Tree

#ifndef H_binaryTree

#define H_binaryTree

#include<iostream>

using namespace std;

//Definition of the node

template< class elemType >

struct binaryTreeNode

{

elemType info;


binaryTreeNode<elemType> *llink;


binaryTreeNode<elemType> *rlink;

};

//Definition of the class

template<class elemType>

class binaryTreeType

{

public:

const binaryTreeType<elemType>& operator=

(const binaryTreeType<elemType>&);

//Overload the assignment operator.

bool isEmpty() const;

//Returns true if the binary tree is empty;

//otherwise, returns false.

void inorderTraversal() const;

//Function to do an inorder traversal of the binary tree.

void preorderTraversal() const;

//Function to do a preorder traversal of the binary tree.

void postorderTraversal() const;

//Function to do a postorder traversal of the binary tree.

int treeHeight() const;

//Returns the height of the binary tree.

int treeNodeCount() const;

//Returns the number of nodes in the binary tree.

int treeLeavesCount() const;

//Returns the number of leaves in the binary tree.

void destroyTree();

//Deallocates the memory space occupied by the binary tree.

//Postcondition: root = NULL;

binaryTreeType<elemType>(const binaryTreeType<elemType>& otherTree);

//copy constructor

binaryTreeType<elemType>();

//default constructor

~binaryTreeType<elemType>();

//destructor

binaryTreeNode<elemType> *root;

private:

void copyTree(binaryTreeNode<elemType>* &copiedTreeRoot, binaryTreeNode<elemType>* otherTreeRoot);

//Makes a copy of the binary tree to which

//otherTreeRoot points. The pointer copiedTreeRoot

//points to the root of the copied binary tree.

void destroy(binaryTreeNode<elemType>* &p);

//Function to destroy the binary tree to which p points.

//Postcondition: p = NULL

void inorder(binaryTreeNode<elemType> *p) const;

//Function to do an inorder traversal of the binary

//tree to which p points.

void preorder(binaryTreeNode<elemType> *p) const;

//Function to do a preorder traversal of the binary

//tree to which p points.

void postorder(binaryTreeNode<elemType> *p) const;

//Function to do a postorder traversal of the binary

//tree to which p points.

int height(binaryTreeNode<elemType> *p) const;

//Function to return the height of the binary tree

//to which p points.

int max(int x, int y) const;

//Returns the larger of x and y.

int nodeCount(binaryTreeNode<elemType> *p) const;

//Function to return the number of nodes in the binary

//tree to which p points

int leavesCount(binaryTreeNode<elemType> *p) const;

//Function to return the number of leaves in the binary

//tree to which p points

};

//Definition of member functions

template<class elemType>

binaryTreeType<elemType>::binaryTreeType()

{

root = NULL;

}

template<class elemType>

bool binaryTreeType<elemType>::isEmpty() const

{

return (root == NULL);

}

template<class elemType>

void binaryTreeType<elemType>::inorderTraversal() const

{

inorder(root);

}

template<class elemType>

void binaryTreeType<elemType>::preorderTraversal() const

{

preorder(root);

}

template<class elemType>

void binaryTreeType<elemType>::postorderTraversal() const

{

postorder(root);

}

template<class elemType>

int binaryTreeType<elemType>::treeHeight() const

{

return height(root);

}

template<class elemType>

int binaryTreeType<elemType>::treeNodeCount() const

{

return nodeCount(root);

}

template<class elemType>

int binaryTreeType<elemType>::treeLeavesCount() const

{

return leavesCount(root);

}

template<class elemType>

void binaryTreeType<elemType>::copyTree

(binaryTreeNode<elemType>* &copiedTreeRoot,

binaryTreeNode<elemType>* otherTreeRoot)

{

if (otherTreeRoot == NULL)

copiedTreeRoot = NULL;

else

{

copiedTreeRoot = new binaryTreeNode<elemType>;

copiedTreeRoot->info = otherTreeRoot->info;

copyTree(copiedTreeRoot->llink, otherTreeRoot->llink);

copyTree(copiedTreeRoot->rlink, otherTreeRoot->rlink);

}

} //end copyTree

template<class elemType>

void binaryTreeType<elemType>::inorder(binaryTreeNode<elemType> *p) const

{

if (p != NULL)

{

inorder(p->llink);

cout << p->info << " ";

inorder(p->rlink);

}

}

template<class elemType>

void binaryTreeType<elemType>::preorder(binaryTreeNode<elemType> *p) const

{

if (p != NULL)

{

cout<<p->info<<" ";

preorder(p->llink);

preorder(p->rlink);

}

}

template<class elemType>

void binaryTreeType<elemType>::postorder(binaryTreeNode<elemType> *p) const

{

if (p != NULL)

{

postorder(p->llink);

postorder(p->rlink);

cout << p->info << " ";

}

}

//Overload the assignment operator

template<class elemType>

const binaryTreeType<elemType>& binaryTreeType<elemType>::

operator=(const binaryTreeType<elemType>& otherTree)

{

if (this != &otherTree) //avoid self-copy

{

if (root != NULL) //if the binary tree is not empty,

//destroy the binary tree

destroy(root);

if (otherTree.root == NULL) //otherTree is empty

root = NULL;

else

copyTree(root, otherTree.root);

}//end else

return *this;

}

template<class elemType>

void binaryTreeType<elemType>::destroy(binaryTreeNode<elemType>* &p)

{

if (p != NULL)

{

destroy(p->llink);

destroy(p->rlink);

delete p;

p = NULL;

}

}

template<class elemType>

void binaryTreeType<elemType>::destroyTree()

{

destroy(root);

}

//copy constructor

template<class elemType>

binaryTreeType<elemType>::binaryTreeType(const binaryTreeType<elemType>& otherTree)

{

if (otherTree.root == NULL) //otherTree is empty

root = NULL;

else

copyTree(root, otherTree.root);

}

template<class elemType>

binaryTreeType<elemType>::~binaryTreeType<elemType>()

{

destroy(root);

}

template<class elemType>

int binaryTreeType<elemType>::height(binaryTreeNode<elemType> *p) const

{

if (p == NULL)

return 0;

else

return 1 + max(height(p->llink), height(p->rlink));

}

template<class elemType>

int binaryTreeType<elemType>::max(int x, int y) const

{

if (x >= y)

return x;

else

return y;

}

template<class elemType>

int binaryTreeType<elemType>::nodeCount(binaryTreeNode<elemType> *p) const

{

cout << "Write the definition of the function nodeCount"

<< endl;

return 0;

}

template<class elemType>

int binaryTreeType<elemType>::leavesCount(binaryTreeNode<elemType> *p) const

{

// if the current tree is not empty

if( p != NULL )

{

// calculate no of leaves in left child

int l = leavesCount( p->llink );


// calculate no of leaves in eight child

int r = leavesCount( p->rlink );


// if the current node is leaf node

if( p->llink == NULL && p->rlink == NULL )

return 1 + l + r;

// if the current node is not leaf node

else

return l + r;

}

else

return 0;

}

#endif
//binarySearchTree
//Header File Binary Search Tree

#ifndef H_binarySearchTree
#define H_binarySearchTree
#include <iostream>
#include "binaryTree.h"

using namespace std;

template <class elemType>
class bSearchTreeType: public binaryTreeType<elemType>
{
public:
    bool search(const elemType& searchItem) const;
      //Function to determine if searchItem is in the binary
      //search tree.
      //Postcondition: Returns true if searchItem is found in
      //               the binary search tree; otherwise,
      //               returns false.

    void insert(const elemType& insertItem);
      //Function to insert insertItem in the binary search tree.
      //Postcondition: If there is no node in the binary search
      //               tree that has the same info as
      //               insertItem, a node with the info
      //               insertItem is created and inserted in the
      //               binary search tree.

    void deleteNode(const elemType& deleteItem);
      //Function to delete deleteItem from the binary search tree
      //Postcondition: If a node with the same info as deleteItem
      //               is found, it is deleted from the binary
      //               search tree.
      //               If the binary tree is empty or deleteItem
      //               is not in the binary tree, an appropriate
      //               message is printed.

private:
    void deleteFromTree(nodeType<elemType>* &p);
      //Function to delete the node to which p points is
      //deleted from the binary search tree.
      //Postcondition: The node to which p points is deleted
      //               from the binary search tree.
};


template <class elemType>
bool bSearchTreeType<elemType>::search
                    (const elemType& searchItem) const
{
    nodeType<elemType> *current;
    bool found = false;

    if (this->root == nullptr)
        cout << "Cannot search an empty tree." << endl;
    else
    {
       current = this->root;

       while (current != nullptr && !found)
        {
            if (current->info == searchItem)
                found = true;
            else if (current->info > searchItem)
                current = current->lLink;
            else
                current = current->rLink;
        }//end while
    }//end else

    return found;
}//end search

template <class elemType>
void bSearchTreeType<elemType>::insert
                 (const elemType& insertItem)
{
    nodeType<elemType> *current; //pointer to traverse the tree
    nodeType<elemType> *trailCurrent = nullptr; //pointer
                                              //behind current
    nodeType<elemType> *newNode;  //pointer to create the node

    newNode = new nodeType<elemType>;
    newNode->info = insertItem;
    newNode->lLink = nullptr;
    newNode->rLink = nullptr;

    if (this->root == nullptr)
        this->root = newNode;
    else
    {
        current = this->root;

        while (current != nullptr)
        {
            trailCurrent = current;

            if (current->info == insertItem)
            {
                cout << "The item to be inserted is already ";
                cout << "in the tree -- duplicates are not "
                     << "allowed." << endl;
                return;
            }
            else if (current->info > insertItem)
                current = current->lLink;
            else
                current = current->rLink;
        }//end while

        if (trailCurrent->info > insertItem)
            trailCurrent->lLink = newNode;
        else
            trailCurrent->rLink = newNode;
    }
}//end insert

template <class elemType>
void bSearchTreeType<elemType>::deleteNode
                                (const elemType& deleteItem)
{
    nodeType<elemType> *current; //pointer to traverse the tree
    nodeType<elemType> *trailCurrent; //pointer behind current
    bool found = false;

    if (this->root == nullptr)
        cout << "Cannot delete from an empty tree."
             << endl;
    else
    {
        current = this->root;
        trailCurrent = this->root;

        while (current != nullptr && !found)
        {
            if (current->info == deleteItem)
                found = true;
            else
            {
                trailCurrent = current;

                if (current->info > deleteItem)
                    current = current->lLink;
                else
                    current = current->rLink;
            }
        }//end while

        if (current == nullptr)
            cout << "The item to be deleted is not in the tree."
                 << endl;
        else if (found)
        {
            if (current == this->root)
                deleteFromTree(this->root);
            else if (trailCurrent->info > deleteItem)
                deleteFromTree(trailCurrent->lLink);
            else
                deleteFromTree(trailCurrent->rLink);
        }
        else
            cout << "The item to be deleted is not in the tree."
                 << endl;
    }
} //end deleteNode

template <class elemType>
void bSearchTreeType<elemType>::deleteFromTree
                                 (nodeType<elemType>* &p)
{
   nodeType<elemType> *current; //pointer to traverse the tree
    nodeType<elemType> *trailCurrent;  //pointer behind current
    nodeType<elemType> *temp;      //pointer to delete the node

    if (p == nullptr)
        cout << "Error: The node to be deleted does not exist."
             << endl;
    else if (p->lLink == nullptr && p->rLink == nullptr)
    {
        temp = p;
        p = nullptr;
        delete temp;
    }
    else if (p->lLink == nullptr)
    {
        temp = p;
        p = temp->rLink;
        delete temp;
    }
    else if (p->rLink == nullptr)
    {
        temp = p;
        p = temp->lLink;
        delete temp;
    }
    else
    {
        current = p->lLink;
        trailCurrent = nullptr;

        while (current->rLink != nullptr)
        {
            trailCurrent = current;
            current = current->rLink;
        }//end while

        p->info = current->info;

        if (trailCurrent == nullptr) //current did not move;
                               //current == p->lLink; adjust p
            p->lLink = current->lLink;
        else
            trailCurrent->rLink = current->lLink;

        delete current;
    }//end else
} //end deleteFromTree

#endif
